var doCache = false

// Name our cache
var CACHE_NAME = 'my-pwa-cache-v1'

// Delete old caches that are not our current one!
self.addEventListener('activate', event => {
  const cacheWhitelist = [CACHE_NAME]
  event.waitUntil(
    caches.keys().then(keyList =>
      Promise.all(
        keyList.map(key => {
          if (!cacheWhitelist.includes(key)) {
            console.log('Deleting cache: ' + key)
            return caches.delete(key)
          }
        }),
      ),
    ),
  )
})

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function (event) {
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME).then(function (cache) {
        // Get the assets manifest so we can see what our js file is named
        // This is because webpack hashes it
        fetch('asset-manifest.json')
          .then(response => {
            response.json()
          })
          .then(assets => {
            // Open a cache and cache our files
            // We want to cache the page and the main.js generated by webpack
            // We could also cache any static assets like CSS or images
            const urlsToCache = ['/', assets['main.js']]
            cache.addAll(urlsToCache)
            console.log('cached')
          })
      }),
    )
  }
})

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request).then(async function (response) {
      let chek = true
      if (event.request.url.indexOf('openweathermap.') > -1) {
        if (await selectCachOrFetch(response, 'dateServiseOpenweathermap')) {
          chek = false
        }
      }
      if (event.request.url.indexOf('weatherstack.com') > -1) {
        if (await selectCachOrFetch(response, 'dateServiseWeatherstack')) {
          chek = false
        }
      }

      if (response && chek) {
        console.log('response')
        return response
      }

      return fetch(event.request).then(response => {
        const responseToCache = response.clone()

        caches.open('v1').then(cache => cache.put(event.request, responseToCache))
        if (event.request.url.indexOf('weatherstack.com') > -1) {
          caches
            .open('v1')
            .then(cache =>
              cache.put(new Request('dateServiseWeatherstack'), new Response(new Date().getTime())),
            )
          console.log('fetch')
        }
        if (event.request.url.indexOf('openweathermap.') > -1) {
          caches
            .open('v1')
            .then(cache =>
              cache.put(
                new Request('dateServiseOpenweathermap'),
                new Response(new Date().getTime()),
              ),
            )
          console.log('fetch')
        }
        return response
      })
    }),
  )
})

function selectCachOrFetch (response, type) {
  const TIMER = 7200000
  if (type === 'dateServiseOpenweathermap') {
    return caches
      .match(new Request('dateServiseOpenweathermap'))
      .then(async responses => {
        const preTime = await responses.text()
        const curentTime = new Date().getTime()
        if (curentTime - preTime < TIMER) {
          return false
        } else {
          return true
        }
      })
      .catch(() => true)
  }
  if (type === 'dateServiseWeatherstack') {
    return caches
      .match(new Request('dateServiseWeatherstack'))
      .then(async responses => {
        const preTime = await responses.text()
        const curentTime = new Date().getTime()
        if (curentTime - preTime < TIMER) {
          return false
        } else {
          return true
        }
      })
      .catch(() => true)
  }
}
// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
